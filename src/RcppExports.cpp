// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_gibbs_lm
arma::mat rcpp_gibbs_lm(const arma::colvec y, const arma::mat X, int iter, double initphi, double hyp_phi_alph, double hyp_phi_gam);
RcppExport SEXP _gibby_rcpp_gibbs_lm(SEXP ySEXP, SEXP XSEXP, SEXP iterSEXP, SEXP initphiSEXP, SEXP hyp_phi_alphSEXP, SEXP hyp_phi_gamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type initphi(initphiSEXP);
    Rcpp::traits::input_parameter< double >::type hyp_phi_alph(hyp_phi_alphSEXP);
    Rcpp::traits::input_parameter< double >::type hyp_phi_gam(hyp_phi_gamSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gibbs_lm(y, X, iter, initphi, hyp_phi_alph, hyp_phi_gam));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _gibby_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mygamma
arma::mat mygamma(int n, double a_shape, double b_rate);
RcppExport SEXP _gibby_mygamma(SEXP nSEXP, SEXP a_shapeSEXP, SEXP b_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a_shape(a_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type b_rate(b_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(mygamma(n, a_shape, b_rate));
    return rcpp_result_gen;
END_RCPP
}
// myinvgamma
arma::mat myinvgamma(int n, double a_shape, double b_rate);
RcppExport SEXP _gibby_myinvgamma(SEXP nSEXP, SEXP a_shapeSEXP, SEXP b_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a_shape(a_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type b_rate(b_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(myinvgamma(n, a_shape, b_rate));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_gibbs_logistic
arma::mat rcpp_gibbs_logistic(const arma::colvec y, const arma::mat X, arma::vec sigma, int iter);
RcppExport SEXP _gibby_rcpp_gibbs_logistic(SEXP ySEXP, SEXP XSEXP, SEXP sigmaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gibbs_logistic(y, X, sigma, iter));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rpg
arma::vec rcpp_rpg(const arma::vec b, const arma::vec c);
RcppExport SEXP _gibby_rcpp_rpg(SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rpg(b, c));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_gibbs_probit
arma::mat rcpp_gibbs_probit(const arma::colvec y, const arma::mat X, int iter);
RcppExport SEXP _gibby_rcpp_gibbs_probit(SEXP ySEXP, SEXP XSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gibbs_probit(y, X, iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gibby_rcpp_gibbs_lm", (DL_FUNC) &_gibby_rcpp_gibbs_lm, 6},
    {"_gibby_mvrnormArma", (DL_FUNC) &_gibby_mvrnormArma, 3},
    {"_gibby_mygamma", (DL_FUNC) &_gibby_mygamma, 3},
    {"_gibby_myinvgamma", (DL_FUNC) &_gibby_myinvgamma, 3},
    {"_gibby_rcpp_gibbs_logistic", (DL_FUNC) &_gibby_rcpp_gibbs_logistic, 4},
    {"_gibby_rcpp_rpg", (DL_FUNC) &_gibby_rcpp_rpg, 2},
    {"_gibby_rcpp_gibbs_probit", (DL_FUNC) &_gibby_rcpp_gibbs_probit, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gibby(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
